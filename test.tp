<STYLE>
BODY, TABLE,TD,TH, P {
  font-family:Verdana,Helvetica,sans serif;
  font-size:18px;
  color:black;
  border-collapse:collapse;
}

h1 { color:black; }
h2 { color:black; }
h3 { color:black; }
TD.bg1 { color:black; background-color:#0000C0; font-size:100% }
TD.bg2 { color:black; background-color:#EAF2D3; font-size:100% }
TD.bg3 { color:black; background-color:#EAF2D3; }
TR.bg4 { color:#000000; background-color:white;font-size:20px;border-collapse:collapse;border:3px solid #98bf21}
TD.bg4 { style="word-wrap: break-word;word-break:break-all;" width="200"  color:#000000; background-color:white;border-collapse:collapse;border:3px solid #98bf21}
TD.test_passed { color:blue; }
TD.test_failed { color:red; }
TD.console { font-family:Courier New; }
</STYLE>
<BODY>

<%
@Grab('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1')

import org.apache.commons.net.ftp.FTPClient
import groovyx.net.http.RESTClient
import static groovyx.net.http.Method.*
import static groovyx.net.http.ContentType.*
import groovy.json.JsonSlurper
import groovyx.net.http.HTTPBuilder
import hudson.model.Environment
import groovy.io.FileType
import java.io.File
import hudson.FilePath
import groovy.xml.MarkupBuilder
import java.text.SimpleDateFormat
import  hudson.*
import hudson.model.* 
import groovyx.net.http.HttpResponseException


def getEnvPR(Build,varkey ){
    pr= Build.getEnvVars().get(varkey )
    if( "${pr}"== "null" ){result= 0 }else{result = pr.toInteger() }
    return result
}

def getCommitsByPR(repath,prId){
    def remote = new HTTPBuilder("https://stash.com")
    def result = null
    System.setProperty("https.protocols", "TLSv1.1");
try {
    def issueJson = remote.request(GET,JSON) { req ->
              uri.path = repath + "/" + prId + "/" + "commits"
              println "start test ${uri.path}"
              headers.'Authorization' ="Basic ${'username:password'.bytes.encodeBase64().toString()}"
              response.success = { resp, json ->
                       json ?: [:]
                       result =  json.values
                       }
                  }
              }catch(HttpResponseException e){
             result = null
         }
    return result
   }

def getDetailsPR(repath,prId){
    def remote = new HTTPBuilder("https://stash.com")
    def result = null 
    try{
           def issueJson = remote.request(GET,JSON) { req ->
            uri.path = repath + "/" + prId
            headers.'Authorization' ="Basic ${'username:password'.bytes.encodeBase64().toString()}"
            response.success = { resp, json ->
                    json ?: [:]
                    if(json.state == "MERGED" ){ result = json }else{result="null"}
             }
             }
            }catch(HttpResponseException e) {
                result = null
            }
      return result
     }

def getChangeList(item){
    project = item.split(/\//)[0].replaceAll("\\s","")
    repo = item.split(/\//)[1].replaceAll("\\s","")
    var = project.trim() + "_" + repo.trim() +"_" + "pr"
    EndBuildPR = getEnvPR(build,var)
    StartBuildPR  = EndBuildPR 
    PreSucBuild = build.getPreviousSuccessfulBuild()
    if (PreSucBuild  != null ){
    StartBuildPR  = getEnvPR(PreSucBuild ,var)
     }
    println "var : $var ; EndBuildPR :${EndBuildPR },StartBuildPR :${StartBuildPR  }  "
    
    result = [:]
    repath = "/rest/api/1.0/projects/${project}/repos/${repo}/pull-requests"
    if( EndBuildPR != 0 ){
         range = EndBuildPR - StartBuildPR  + 2
         def prmessage =  [:]
         def prcommit = [:]
         if( EndBuildPR  ==1 ){range = 1}
         for(pr =0  ;pr<range ; pr++){
               prId = EndBuildPR - pr
               prmessage[prId ] = getDetailsPR(repath.trim() ,prId)
               if (prmessage[prId ]  == "null" ){ continue }
                prcommit[prId ] = getCommitsByPR(repath ,prId)
                //println "dfffffffffff ${prcommit[prId ]} "
               }
         if(prcommit != null){
         result["COMMIT"] = prcommit
         result["PR"] = prmessage
         }
         }
         if(result.size()>0){
               def keys = result.keySet() as List
               }
         println "aaaaaaaaaaaaaaaaaaaaaaa"
         println "${result}"
         return result
}


def  repolist= build.getEnvVars().get('repolist')
println repolist
def product = build.project.name.split("_")[0]

FTPClient ftpClient = new FTPClient()
host = "ip"
ftpClient.connect(host)
ftpClient.login("sw_ftpuser", "sw_ftpuser")

def getReleasePath(base_path,ftpClient){
   def files = ftpClient.listNames(base_path)
   if(files ==null){println "upload the target file failed"}else{ftpClient.changeWorkingDirectory(base_path)
   def zipfile
   for( file in files) {if(file.contains("flashfiles")){ zipfile =  file}}
   def  zip_path = ftpClient.printWorkingDirectory() + "/" +zipfile 
   return zip_path
  }
}

def getAblReleasePath(base_path,ftpClient){
   //base_path = "//ABL/"
    def files = ftpClient.listDirectories(base_path)
    if(files == "null"){println "upload the target file failed"
      }else{
          new_path = base_path  + files[-1].getName()
          ftpClient.changeWorkingDirectory(new_path)
          def ablfiles = ftpClient.listNames(new_path)
          def zipfile
          for( file in ablfiles) { if(file.contains("bin")){ zipfile =  file}}
          def  zip_path = ftpClient.printWorkingDirectory()+"/" +zipfile 
          return zip_path
}}

def flash_path = "" + "/DailyBuild/" + build.project.name + "_"+ build.getNumber()
def abl_path = "//ABL/"
def flashfiles_path = "ftp://" + host + getReleasePath(flash_path,ftpClient)
def ablbin_path = "ftp://" + host + getAblReleasePath(abl_path,ftpClient)

ftpClient.logout()
ftpClient.disconnect()


def tag_name = flashfiles_path.split("_")[-1].replace(".zip","")

Calendar strDate = build.getTimestamp() 
def date = strDate.get(Calendar.DAY_OF_MONTH) 
def month = strDate.get(Calendar.MONTH) +1
def year = strDate.get(Calendar.YEAR) %10
def buildnum = build.getNumber() 
def node = build.getBuiltOn().getNodeName()

%>


<TABLE>
  <TR><TD align="right"><IMG SRC="${rooturl}static/e59dfe28/images/32x32/<%= build.result.toString() == 'SUCCESS' ? "blue.gif" : build.result.toString() == 'FAILURE' ? 'red.gif' : 'yellow.gif' %>" />
  </TD><TD  valign="center"><B style="font-size: 200%;">BUILD  ${build.result}</B></TD></TR>
 <TR><TD class="bg2"  colspan="2"><B>SUMMARY</B></TD></TR>
  <TR class="bg4"  ><TD  class="bg4" valign="left" >Product:</TD><TD class="bg4" >${product}</TD></TR>
<!--  <TR class="bg4"  ><TD  class="bg4" valign="left" >Tag:</TD><TD class="bg4" >${tag_name}</TD></TR> -->
  <TR class="bg4" ><TD  class="bg4" valign="left" >Job:</TD><TD class="bg4" >${project.name}</TD></TR>
  <TR class="bg4" ><TD  class="bg4" valign="left" >Trigger:</TD><TD class="bg4" >${it.timestampString}</TD></TR>
  <TR class="bg4" ><TD  class="bg4" valign="left" >Duration:</TD><TD class="bg4" >${build.durationString}</TD></TR>
  <TR class="bg4" ><TD  class="bg4" valign="left" >Node:</TD><TD class="bg4" >${node}</TD></TR>
  <TR class="bg4" ><TD  class="bg4" valign="left" >SCM:</TD><TD class="bg4" ><% build.causes.each() { cause -> %> ${cause.shortDescription} <%  } %></TD></TR>
  <TR class="bg4" ><TD  class="bg4" valign="left" >Build URL:</TD><TD class="bg4" ><A href="${rooturl}${build.url}">${rooturl}${build.url}</A></TD></TR>
<!--  <TR class="bg4" ><TD  class="bg4" valign="left" >ABL:</TD><TD class="bg4" ><A href=${ablbin_path}>${ablbin_path}</A></TD></TR> -->


<%if(build.result==hudson.model.Result.SUCCESS) {
 
%>
<TR class="bg4"  ><TD  class="bg4" valign="left" >Tag:</TD><TD class="bg4" >${tag_name}</TD></TR>
<TR class="bg4" ><TD  class="bg4" valign="left" >ABL:</TD><TD class="bg4" ><A href=${ablbin_path}>${ablbin_path}</A></TD></TR>
<TR class="bg4"  ><TD class="bg4" valign="left"  >Flash:</TD>
<TD class="bg4" ><a href=${flashfiles_path}>${flashfiles_path}</a></TD>
</TR>
<%  } %>

</TABLE>
<BR/>


<!-- CHANGE SET --> 
 <TABLE width="100%" cellpadding="0" cellspacing="0">
 <TR><TD class="bg2"  colspan="2"><B>CHANGES</B></TD></TR>
<% 
   str = repolist.substring(1, repolist.length() - 1)
   for(item in str.split(",") ) {
      def hadChanges = false 
      project = item.split("/")[0].replaceAll("\\s","")
      repo =  item.split("/")[1].replaceAll("\\s","")
      base_url = "https://stash1.harman.com/projects" + "/" + project.trim()+ "/" +"repos"+ "/"+ repo.trim()
      caps_url  = "https://stash1.harman.com/projects" + "/" + project.toUpperCase().trim()+ 
                                                     "/" +"repos"+ "/"+ repo.trim()
      data = getChangeList(item)
      if(data.size() >0 ){
        hadChanges = true  
        println "DATA : $data"
        def keys = data.get("COMMIT").keySet() 
        commit = data.get("COMMIT")
        prmes = data.get("PR")
        println "ttttttttttttt :${prmes}" %>
        <h5> <a href=${base_url}>${item}</a>
        <% for(id in keys  ){
          // closeDate  = new Date(prmes.get(id).get('closedDate')).format("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
           pr_url = caps_url  + "/" + "pull-requests"+ "/" + id +"/"+ "overview"
           println "title : ${prmes}"
           commitS = prmes.get(id)[0]
           %>
            <ul><li><p>
             <a href=${pr_url}>PR-${id}:</a>
             <a>${commitS} </a>
            </p></li></ul> 
<%
           }
         }  
 %>
<%  
        if(!hadChanges) { %>
        <TR><TD colspan="2">No Changes</TD></TR>
       <%      } } %>
</TABLE>
<BR/>


<!-- ARTIFACTS -->
<% def artifacts = build.artifacts
if(artifacts != null && artifacts.size() > 0) { %>
  <TABLE width="100%">
    <TR><TD class="bg1"><B>BUILD ARTIFACTS</B></TD></TR>
    <TR>
      <TD>
<% 		artifacts.each() { f -> %>		
      	  <li>
      	    <a href="${rooturl}${build.url}artifact/${f}">${f}</a>
      	  </li>
<%		} %>
      </TD>
    </TR>
  </TABLE>
<BR/>  
<% } %>

<!-- MAVEN ARTIFACTS -->
<% 
try {
  def mbuilds = build.moduleBuilds
  if(mbuilds != null) { %>
  <TABLE width="100%">
      <TR><TD class="bg1"><B>BUILD ARTIFACTS</B></TD></TR>
<% 
    try {  
        mbuilds.each() { m -> %>	  
        <TR><TD class="bg2"><B>${m.key.displayName}</B></TD></TR>
<%		m.value.each() { mvnbld ->
			def artifactz = mvnbld.artifacts
			if(artifactz != null && artifactz.size() > 0) { %>			
      <TR>
        <TD>
<%				artifactz.each() { f -> %>			
      	    <li>
      	      <a href="${rooturl}${mvnbld.url}artifact/${f}">${f}</a>
      	    </li>
<%				} %>		
      	</TD>
      </TR>
<%			} 
		}
       }
    } catch(e) {
	// we don't do anything
    }  %>      
  </TABLE>
<BR/>
<% } 

}catch(e) {
	// we don't do anything
}
%>

<!-- JUnit TEMPLATE -->

<% def junitResultList = it.JUnitTestResult
try {
 def cucumberTestResultAction = it.getAction("org.jenkinsci.plugins.cucumber.jsontestsupport.CucumberTestResultAction")
 junitResultList.add(cucumberTestResultAction.getResult())
} catch(e) {
        //cucumberTestResultAction not exist in this build
}
if (junitResultList.size() > 0) { %>
 <% junitResultList.each{
  junitResult ->  %>
  <TABLE width="100%">
    <TR><TD colspan="2" class="bg2" ><B>${junitResult.description}</B></TD></TR>
     <% junitResult.getChildren().each { packageResult -> %>
        <TR><TD class="bg2" colspan="2"> Name: ${packageResult.getName()} Failed: ${packageResult.getFailCount()} test(s), Passed: ${packageResult.getPassCount()} test(s), Skipped: ${packageResult.getSkipCount()} test(s), Total: ${packageResult.getPassCount()+packageResult.getFailCount()+packageResult.getSkipCount()} test(s)</TD></TR>
        <% packageResult.getFailedTests().each{ failed_test -> %>
          <TR bgcolor="white"><TD class="test_failed" colspan="2"><B><li>Failed: ${failed_test.getFullName()} </li></B></TD></TR>
        <% }
      } %>
  </TABLE>
  <BR/>
<%
 }
} %>

<!-- CONSOLE OUTPUT -->
<% if(build.result==hudson.model.Result.FAILURE) { %>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR><TD class="bg2" ><B>CONSOLE OUTPUT</B></TD></TR>
<% 	build.getLog(100).each() { line -> %>
	<TR><TD class="console">${org.apache.commons.lang.StringEscapeUtils.escapeHtml(line)}</TD></TR>
<% 	} %>
</TABLE>
<BR/>
<% } %>

</BODY>
